# IntegraÃ§Ã£o e Uso de Scripts DinÃ¢micos no Work Adventure

Com a introduÃ§Ã£o do `map-scripting`, seu mapa do Work Adventure pode se tornar muito mais interativo e dinÃ¢mico. Esta seÃ§Ã£o detalha como integrar o arquivo `mapScript.js` gerado e como ele funciona em conjunto com o arquivo JSON do mapa Tiled para criar experiÃªncias ricas para os usuÃ¡rios.

## 1. O Conceito de Map-Scripting no Work Adventure

O Work Adventure permite que vocÃª adicione "inteligÃªncia" ao seu mapa atravÃ©s de scripts JavaScript. Esses scripts sÃ£o executados no navegador do usuÃ¡rio e podem interagir com o ambiente do jogo usando o objeto global `WA`. Isso permite criar funcionalidades como mensagens de boas-vindas, interaÃ§Ãµes com objetos, ativaÃ§Ã£o de pop-ups, e muito mais. Ã‰ importante notar que, por padrÃ£o, esses scripts sÃ£o executados apenas no lado do cliente e nÃ£o afetam diretamente a experiÃªncia de outros usuÃ¡rios, a menos que vocÃª use funcionalidades especÃ­ficas que se comuniquem com o servidor (como o chat ou APIs externas).

## 2. Estrutura de Arquivos e Propriedade `script` no JSON

Para que o Work Adventure saiba qual script executar para um mapa especÃ­fico, vocÃª precisa referenciÃ¡-lo no arquivo JSON do mapa Tiled. Isso Ã© feito atravÃ©s da propriedade `script` nas propriedades do mapa.

### 2.1. O Arquivo `mapScript.js`

O arquivo `mapScript.js` que foi gerado contÃ©m a lÃ³gica para as interaÃ§Ãµes dinÃ¢micas. Ele deve ser colocado em um local acessÃ­vel pelo Work Adventure, geralmente na mesma pasta do seu arquivo JSON do mapa Tiled, ou em um subdiretÃ³rio que vocÃª referencie corretamente.

**Exemplo de ConteÃºdo de `mapScript.js`:**

```javascript
// mapScript.js

WA.onInit().then(() => {
    console.log("Map script initialized!");

    // Exemplo: Mensagem de boas-vindas ao entrar no mapa
    WA.chat.sendChatMessage("Bem-vindo ao Hub da AR Online! Explore nosso espaÃ§o interativo.", "AR Online Bot");

    // Exemplo: InteraÃ§Ã£o com o logo da AR Online
    WA.room.onEnterLayer("AR Online Logo").subscribe(() => {
        WA.chat.sendChatMessage("OlÃ¡! Este Ã© o logo da AR Online. Clique para saber mais sobre nossa missÃ£o.", "AR Online Bot");
        // WA.ui.openCoWebSite("https://www.ar-online.com.br/sobre");
    });

    // Exemplo: InteraÃ§Ã£o com o TelÃ£o TecnolÃ³gico
    WA.room.onEnterLayer("TelÃ£o TecnolÃ³gico").subscribe(() => {
        WA.chat.sendChatMessage("Assista aos nossos vÃ­deos institucionais ou confira os dashboards!", "AR Online Bot");
        // WA.ui.openCoWebSite("https://www.ar-online.com.br/video-institucional");
    });

    // ... (outras interaÃ§Ãµes)
});
```

### 2.2. A Propriedade `script` no JSON do Mapa

No arquivo `work_adventure_map_v3.json`, a propriedade `script` foi adicionada no nÃ­vel raiz do objeto JSON do mapa. Isso informa ao Work Adventure qual arquivo JavaScript deve ser carregado e executado quando o mapa Ã© acessado.

**Exemplo no `work_adventure_map_v3.json`:**

```json
{
    "compressionlevel": -1,
    "height": 70,
    "infinite": false,
    "layers": [
        // ... suas camadas ...
    ],
    "nextlayerid": 1,
    "nextobjectid": 1,
    "orientation": "orthogonal",
    "renderorder": "right-down",
    "tiledversion": "1.9.2",
    "tileheight": 32,
    "tilesets": [
        // ... seus tilesets ...
    ],
    "tilewidth": 32,
    "type": "map",
    "version": "1.9",
    "width": 70,
    "properties": [
        {
            "name": "script",
            "type": "string",
            "value": "mapScript.js" // Caminho para o seu script
        }
    ]
}
```

Certifique-se de que o valor da propriedade `value` (`"mapScript.js"` neste exemplo) corresponda ao caminho relativo do seu arquivo JavaScript em relaÃ§Ã£o ao arquivo JSON do mapa. Se o `mapScript.js` estiver na mesma pasta que `work_adventure_map_v3.json`, o valor `"mapScript.js"` Ã© suficiente. Se estiver em um subdiretÃ³rio (ex: `scripts/mapScript.js`), o valor deve ser `"scripts/mapScript.js"`.

## 3. Utilizando o Objeto `WA` para InteraÃ§Ãµes

O objeto global `WA` Ã© a interface principal para interagir com o ambiente do Work Adventure a partir do seu script. Ele fornece uma sÃ©rie de mÃ©todos e eventos para controlar o jogo.

### 3.1. `WA.onInit()`

Ã‰ fundamental que todo o seu cÃ³digo de script seja envolvido em `WA.onInit().then(() => { ... });`. Isso garante que o script sÃ³ serÃ¡ executado depois que o Work Adventure estiver completamente inicializado e o objeto `WA` estiver disponÃ­vel.

### 3.2. Interagindo com Camadas e Objetos (`WA.room`)

VocÃª pode reagir quando um jogador entra ou sai de uma camada ou objeto especÃ­fico no mapa. As camadas e objetos sÃ£o identificados pelos seus nomes definidos no Tiled Editor.

*   `WA.room.onEnterLayer("NomeDaCamadaOuObjeto")`: Dispara um evento quando o jogador entra na Ã¡rea de uma camada ou objeto com o nome especificado.
*   `WA.room.onLeaveLayer("NomeDaCamadaOuObjeto")`: Dispara um evento quando o jogador sai da Ã¡rea de uma camada ou objeto com o nome especificado.

**Exemplo:**

```javascript
WA.room.onEnterLayer("AR Online Logo").subscribe(() => {
    WA.chat.sendChatMessage("VocÃª estÃ¡ perto do logo da AR Online.", "Bot");
});
```

### 3.3. Interagindo com o Chat (`WA.chat`)

Envie mensagens para o chat do jogo, seja para o jogador atual ou para todos na sala.

*   `WA.chat.sendChatMessage("Mensagem", "NomeDoRemetente")`: Envia uma mensagem para o chat.

**Exemplo:**

```javascript
WA.chat.sendChatMessage("Bem-vindo ao nosso espaÃ§o virtual!", "AR Online Bot");
```

### 3.4. Abrindo Websites e Iframes (`WA.ui`)

VocÃª pode abrir websites ou iframes diretamente do seu script, permitindo integraÃ§Ãµes com sistemas externos.

*   `WA.ui.openCoWebSite("URL")`: Abre um website em um iframe dentro do Work Adventure.

**Exemplo:**

```javascript
WA.ui.openCoWebSite("https://www.ar-online.com.br");
```

### 3.5. Outras Funcionalidades (`WA.player`, `WA.controls`, etc.)

O objeto `WA` oferece muitas outras funcionalidades, como:

*   `WA.player`: Para interagir com o jogador (movimento, posiÃ§Ã£o, etc.).
*   `WA.controls`: Para desabilitar ou habilitar controles do jogador.
*   `WA.camera`: Para controlar a cÃ¢mera do jogo.
*   `WA.state`: Para gerenciar estados persistentes no mapa.

Recomenda-se consultar a [documentaÃ§Ã£o oficial do Work Adventure sobre Map Scripting](https://docs.workadventu.re/developer/map-scripting/) para uma lista completa e atualizada de todas as funcionalidades disponÃ­veis.

## 4. ConsideraÃ§Ãµes de SeguranÃ§a e CORS

Ao usar scripts, especialmente aqueles que carregam recursos externos (como imagens ou dados de APIs) ou abrem iframes, Ã© crucial estar ciente das polÃ­ticas de Same-Origin Policy e CORS (Cross-Origin Resource Sharing).

*   **CORS:** Se o seu script tentar carregar recursos de um domÃ­nio diferente do Work Adventure, o servidor que hospeda esses recursos precisarÃ¡ ter os cabeÃ§alhos CORS configurados corretamente para permitir o acesso. Caso contrÃ¡rio, vocÃª verÃ¡ erros no console do navegador relacionados a CORS.
*   **Sandboxing:** Scripts sÃ£o executados em um iframe sandboxed por seguranÃ§a. Isso impÃµe algumas restriÃ§Ãµes. Se vocÃª precisar de interaÃ§Ãµes mais complexas com iframes, pode ser necessÃ¡rio usar a propriedade `openWebsiteAllowApi: true` ao definir o objeto no Tiled e importar a `iframe_api.js` dentro do seu iframe, conforme detalhado na documentaÃ§Ã£o do Work Adventure.

## 5. PrÃ³ximos Passos

1.  **Posicione os Arquivos:** Coloque o `work_adventure_map_v3.json` e o `mapScript.js` nos diretÃ³rios apropriados do seu projeto Work Adventure (geralmente `maps/` para o JSON e `scripts/` ou na mesma pasta para o JS).
2.  **Ajuste Caminhos:** Verifique se o caminho para `mapScript.js` na propriedade `script` do JSON estÃ¡ correto.
3.  **Teste:** Carregue seu mapa no Work Adventure e observe o console do navegador para quaisquer erros. Interaja com os objetos para ver os scripts em aÃ§Ã£o.
4.  **Expanda:** Use este `mapScript.js` como base para adicionar mais interaÃ§Ãµes e funcionalidades, explorando a API `WA` conforme suas necessidades.


